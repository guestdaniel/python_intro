\documentclass{beamer}
\usepackage{hyperref}

\title{Python Intro --- Part 2}
\subtitle{Loops, Spectrograms}
\author{Daniel Guest}

\AtBeginSection[]{
	\begin{frame}
	\vfill
	\centering
	\usebeamerfont{title}\insertsectionhead\par%
	\vfill
	\end{frame}
}

\begin{document}

\maketitle

\tableofcontents

\section{KnitR}

\begin{frame}[fragile]
\frametitle{First, a small aside...}
\begin{itemize}
	\item This entire presentation is a KnitR demonstration, as well as a presentation on Python

	\item Check out the .Rnw file at \url{https://github.com/guestdaniel/python\_intro/tree/master/02\_spectrograms}

	\item KnitR mixes R and \LaTeX{} to generate high quality publications and presentations

		\begin{itemize}
			\item This makes it super easy to include graphics

			\item KnitR also has nice options for syntax highlighting for many programming languages 

		\end{itemize}
	
	\item I'm using the \LaTeX{} beamer package to create this slideshow

\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{First, a small aside...}
<<include=FALSE, echo=FALSE>>=
library(ggplot2)
library(dplyr)
@

A nice demonstration of KnitR!

<<size="tiny">>=
head(select(iris, Sepal.Width, Petal.Length, Petal.Width, Species))
head(iris %>% group_by(Species) %>% summarize(wid.mean = mean(Sepal.Width), wid.sd = sd(Sepal.Width)))
@
\end{frame}

\begin{frame}[fragile]
\frametitle{First, a small aside...}
<<fig.width=8, fig.height=4, size="tiny">>=
ggplot(iris, aes(x=Sepal.Width, y=Petal.Length, color=Petal.Width, shape=Species)) + geom_point()
@
\end{frame}

\section{Intro}

\begin{frame}
\frametitle{Plan}
\begin{itemize}
	\item We're going to focus on two things 

	\begin{enumerate}
		\item Theoretical --- control statements and loops

		\item Practical --- applying numpy and scipy to analyze sound 
	\end{enumerate}

	\item What we'll need
	\begin{enumerate}
		\item Python 3 (through IPython)

		\item numpy, scipy, matplotlib, sounddevice

		\item Sound files (in folder "samples") 
	\end{enumerate}

	\item Overview
	\begin{enumerate}
		\item Get the packages we need

		\item Set up editor 

		\item A brief intro to loops

		\item Make one spectrogram

		\item Make a bunch of spectrograms
	\end{enumerate}
\end{itemize}
\end{frame}

\section{Packages}

\begin{frame}[fragile]
\frametitle{Installing sounddevice}
	\begin{itemize}
		\item Why we need each of the following packages is explained later!

		\item We should already have numpy, scipy, and matplotlib installed through Conda

		\item However, we do need to install sounddevice, which will allow us to play sound from a numpy array

		\item Unfortunately, Conda doesn't support installs of sounddevice, so we'll install it manually using pip

		\item pip is a popular Python package manager

		\item To do so, we'll run the following command (in your terminal, \emph{not} in Python):

<<installsd, engine="sh", eval=FALSE>>=
pip install sounddevice
@

	\end{itemize}
\end{frame}

\section{Scripts}

\begin{frame}
\frametitle{Editors}
\begin{itemize}
	\item Today, we'll just be writing scripts in a text editor, saving them to disk, and then running them through the IPython terminal 
	\item You'll soon probably want something more fully fledged, these are good options:
	\begin{enumerate}
		\item Spyder

		\item Eclipse

		\item SublimeText

		\item PyCharm
	\end{enumerate}

	\item Now, let's open up Notepad (or any similar program in Mac/Linux)... 
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Writing and running a script}
\begin{itemize}
	\item First we write some commands in Notepad 

	\item Note that Python is sensitive to indentation --- where MATLAB uses "end" and R brackets, Python uses indentation to indicate nested statements

	\item Starting with something simple...

<<engine="python", engine.path="python3", results="hide">>=
print(2+2)
@

	\item Save this using Notepad to a file called "test.py"

	\item Then, run the following line (for Windows)...

<<runscript, engine="sh", eval=FALSE>>=
python3 C:\\your_directory_here\\test.py
@

	\item Or this line (for Mac/Linux)...

<<runscriptunix, engine="sh", eval=FALSE>>=
python3 /your_directory_here/test.py
@

\end{itemize}
\end{frame}

\section{Loops}

\begin{frame}[fragile]
\frametitle{Our first loop}
\begin{itemize}
	\item Loops in Python have a very easy and powerful syntax

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in range(5):
	print(i)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Loop syntax}
\begin{itemize}
	\item As previously mentioned, Python uses indentation to indicate nesting

	\item If we don't indent at least one line for a loop we'll have problems

	\item I personally like this, I think it promotes more readable code!

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in range(5):
print(i)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Looping over other things}
\begin{itemize}
	\item We can loop over a variety of objects

	\item The range() function is for when we want integer sequences, but many things in Python can be used to create a loop (technically, these things are called iterables in Python-lingo)

	\item Lists are iterables...

	\item You can also define your own custom objects to be iterables!

\end{itemize}
<<engine="python", engine.path="python3">>=
x = [1,4,9,16,25]
for i in x:
	print(str(i) + str(x))
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Looping over other things}
\begin{itemize}
	\item Strings are also iterables... 

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in "Hello":
	print(i)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Nested loops}
\begin{itemize}
	\item Just like in other languages, we can nest for loops to do more powerful things
\end{itemize}
<<engine="python", engine.path="python3", size="tiny">>=
bases = [1, 2, 3]
expos = [1, 2, 3, 4]
for base in bases:
	print("Base:" + str(base))
	for expo in expos:
		print(str(base) + "^" + str(expo) + "=" + str(base**expo))
@
\end{frame}

\begin{frame}[fragile]
\begin{itemize}
	\item Naturally, we can mix loops and other control statements 

<<engine="python", engine.path="python3", size="tiny">>=
for i in range(10):
	if i < 3:
		print(i)
	elif i > 3 and i < 6:
		print(i*100)
	elif i == 8:
		break
	else:
		print("Hello")
@
\end{itemize}
\end{frame}

\section{Making a spectrogram}

\begin{frame}[fragile]
\frametitle{Game Plan}
\begin{enumerate}
		\item Import one signal

		\item Collect measurements of amplitude in each time frequency bin 

		\item Plot it

		\item Save the plot to file

		\item Loop the above four steps as necessary

		\item Put everything in a script
\end{enumerate}
\end{frame}

\begin{frame}[fragile]
\frametitle{Setting up the environment}
\begin{itemize}
	\item First, launch your Python terminal

	\item Then, we need to import the necessary modules
<<engine="python", engine.path="python3">>=

import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd

@
\end{itemize}

\begin{itemize}
	\item numpy --- provides key matrix and DSP operations

	\item wavfile --- provides read/write to wavfile
	
	\item pyplot --- user-friendly functions and objects for plotting

	\item sounddevice --- playback from numpy arrays
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Importing a sound file}
\begin{itemize}
	\item Run the following lines (may need to tweak the location to match where your file is located!)...
<<engine="python", engine.path="python3", echo=5:6, eval=FALSE>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs, y] = wavfile.read(location)
@

	\item This will place the sampled waveform contained in m03ae.wav with sample rate fs into the numpy vector y

	\item We can see what this waveform looks like with ...

<<engine="python", engine.path="python3", echo=7:8, eval=FALSE>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs, y] = wavfile.read(location)
y = y/np.max(np.abs(y))
plt.plot(y)
@

	\item And what it sounds like with...

<<engine="python", engine.path="python3", echo=7, results="hide", eval=FALSE>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs,y] = wavfile.read(location)
sd.play(y,fs)
@
\end{itemize}
\end{frame}

\end{document}

