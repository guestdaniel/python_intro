\documentclass{beamer}

\title{Python Intro --- Part 2}
\subtitle{Loops, Spectrograms}
\author{Daniel Guest}

\begin{document}

\maketitle

\tableofcontents

\section{KnitR}

\begin{frame}[fragile]
\frametitle{First, a small aside...}
\begin{itemize}
	\item This entire presentation is a KnitR demonstration, as well as a presentation on Python

	\item Check out the .Rnw file to see the mixture of \LaTeX{} code and R code that is combined by KnitR to generate the output
	
	\item I'm using the \LaTeX{} beamer package to create this slideshow

	\item KnitR makes for very elegant presentations of R code and easy inclusion of graphics
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{First, a small aside...}
<<include=FALSE, echo=FALSE>>=
library(ggplot2)
library(dplyr)
@

<<>>=
d <- select(iris, Sepal.Width, Petal.Length, Petal.Width)
head(d)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{First, a small aside...}

<<fig.width=4, fig.height=2>>=
ggplot(d,aes(x=Sepal.Width, y=Petal.Length, color=Petal.Width)) + geom_point()
@
\end{frame}

\begin{frame}[fragile]
\frametitle{First, a small aside...}

\begin{itemize}
		\item Of course, the question arises --- Why is KnitR and \LaTeX{} in \emph{this} presentation?

	\item KnitR is also ready to handle other languages

	\item If you ever need to present code in Python, C, R, Scala, Perl, Fortran, etc...

	\item For example...

<<engine="python", engine.path="python3">>=
x = [1,2,3,4,5]
x.append(4)
print(2+2)
print(x)
@
\end{itemize}
\end{frame}

\section{Intro}

\begin{frame}
\frametitle{Plan}
\begin{itemize}
	\item We're going to focus on two things today

	\begin{enumerate}
		\item Theoretical --- control statements and loops

		\item Practical --- applying numpy and scipy to analyze sound 
	\end{enumerate}

	\item What we'll need
	\begin{enumerate}
		\item Python 3 (through IPython)

		\item numpy, scipy, matplotlib, sounddevice

		\item Sound files (in folder "samples") 
	\end{enumerate}

	\item Overview
	\begin{enumerate}
		\item Set up scripting tools

		\item A brief intro to loops

		\item Make one spectrogram

		\item Make a bunch of spectrograms
	\end{enumerate}
\end{itemize}
\end{frame}

\section{Scripts}

\begin{frame}
\frametitle{Bare bones scripting}
\begin{itemize}
	\item Today, we'll set up a bare bones environment for scripts

	\item You'll soon probably want something more fully fledged...
	\begin{enumerate}
		\item Spyder

		\item Eclipse
	\end{enumerate}

	\item Now, let's open up Notepad++
\end{itemize}
\end{frame}

\section{Loops}

\begin{frame}[fragile]
\frametitle{Our first loop}
\begin{itemize}
	\item Loops in Python have a very easy and powerful syntax

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in range(5):
	print(i)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Loop syntax}
\begin{itemize}
	\item Unlike MATLAB and R which employ brackets, Python uses tabs to indicate nesting

	\item If we don't indent at least one line for a loop we'll have problems

	\item I personally like this, I think it promotes more readable code!

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in range(5):
print(i)
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Looping over other things}
\begin{itemize}
	\item We can loop over a variety of objects

	\item The range() function is for when we want integer sequences, but many things in Python can be used to create a loop (technically, these things are called iterables in Python-lingo)

	\item Lists are iterables...

\end{itemize}
<<engine="python", engine.path="python3">>=
x = [1,4,9,16,25]
for i in x:
	print(str(i) + str(x))
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Looping over other things}
\begin{itemize}
	\item Strings are also iterables... 

\end{itemize}
<<engine="python", engine.path="python3">>=
for i in "Hello":
	print(i)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Nested loops}
\begin{itemize}
	\item Just like in other languages, we can nest for loops to do more powerful things
\end{itemize}
<<engine="python", engine.path="python3", size="tiny">>=
bases = [1, 2, 3]
for base in bases:
	for expo in range(3):
		print(str(base) + "^" + str(expo) + "=" + str(base**expo))
@
\end{frame}



\section{Making a spectrogram}
\begin{frame}[fragile]
\frametitle{Setting up the environment}
\begin{itemize}
	\item First, we need to import the necessary modules
<<engine="python", engine.path="python3">>=

import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd

@
\end{itemize}

\begin{itemize}
	\item Numpy --- provides key matrix and DSP operations

	\item wavfile --- provides read/write to wavfile
	
	\item pyplot --- user-friendly functions and objects for plotting
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Game Plan}
\begin{enumerate}
		\item Import one signal
		\item Collect measurements of amplitude in each time frequency bin 
		\item Plot it
		\item Save the plot to file
		\item Loop the above four steps as necessary
		\item Put everything in a script
\end{enumerate}
\end{frame}

\begin{frame}[fragile]
\frametitle{Importing a sound file}
\begin{itemize}
	\item The following pertains specifically to certain types of .wav files
	\item For other file types or unusual .wavs, you may need to do some research!
<<engine="python", engine.path="python3", echo=5:6>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs, y] = wavfile.read(location)
@

	\item This will place the sampled waveform contained in m03ae.wav with sample rate fs into the numpy vector y

	\item We can see what this waveform looks like with ...

<<engine="python", engine.path="python3", echo=7>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs, y] = wavfile.read(location)
y = y/np.max(np.abs(y))
plt.plot(y)
@

	\item And what it sounds like with...

<<engine="python", engine.path="python3", echo=7>>=
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs,y] = wavfile.read(location)
sd.play(y,fs)
@
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Gathering amplitude measurements}
\begin{itemize}
	\item First, let's look at measuring the amplitude spectra of the entire signal, then we'll investigate how to break it into overlapping chunks to generate the time-frequency bin matrix 
<<engine="python", engine.path="python3", echo=7:8>>=
import numpy
from scipy.io import wav			
import matplotlib.pyplot as plt
import sounddevice as sd
location = "/home/daniel/Desktop/samples/m03ae.wav"
[fs,y] = wavfile.read(location)
m = 20*np.log10(np.fft.rfft(y))
@
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Importing some files}
<<engine="python", engine.path="python3">>=
2+2
@
\end{frame}

\end{document}

